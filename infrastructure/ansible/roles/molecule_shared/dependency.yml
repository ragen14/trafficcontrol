---
- hosts: localhost
  connection: local
  gather_facts: false

  vars:
    secret_varfile_src: "{{ playbook_dir }}/secret_varfile.json"
    secret_varfile_dest: "{{ lookup('env','MOLECULE_EPHEMERAL_DIRECTORY') }}/secret_varfile.json"
    lab_ssl_dir: "{{ playbook_dir }}/files/ssl"
    lab_rpm_dir: "{{ lookup('env','MOLECULE_EPHEMERAL_DIRECTORY') }}//files/rpm/{{ centos_version }}"
    lab_srpm_dir: "{{ lookup('env','MOLECULE_EPHEMERAL_DIRECTORY') }}//files/srpm/{{ centos_version }}"
    lab_ca_root_csr: "{{ lab_ssl_dir }}/lab.rootca.key.csr"
    lab_ca_root_key: "{{ lab_ssl_dir }}/lab.rootca.key.pem"
    lab_ca_root_crt: "{{ lab_ssl_dir }}/lab.rootca.crt"
    lab_ca_int_csr: "{{ lab_ssl_dir }}/lab.intermediateca.csr"
    lab_ca_int_key: "{{ lab_ssl_dir }}/lab.intermediateca.key.pem"
    lab_ca_int_crt: "{{ lab_ssl_dir }}/lab.intermediateca.crt"
    rpm_dist_dir: "{{ playbook_dir }}/../../../../dist"
    centos_version: "{{ matrix_distro_mapping[lookup('env','MOLECULE_DISTRO') | default('centos7',true)] }}"
    extended_centos_version: "el{{ centos_version }}"
    matrix_distro_mapping:
      centos7: 7
      centos8: 8

  tasks:
    - name: Load existing secret varfile
      include_vars:
        file: "{{ secret_varfile_src }}"
        name: existing_secrets
      ignore_errors: true
      no_log: true

    - name: Populate all the secrets to be used with this lab
      set_fact:
        secrets:
          postgresql_admin_user_password: "{{ existing_secrets_nullable.postgresql_admin_user_password | default(lookup('password', password_settings)) }}"
          postgresql_replica_user_password: "{{ existing_secrets_nullable.postgresql_replica_user_password | default(lookup('password', password_settings)) }}"
          todb_password: "{{ existing_secrets_nullable.todb_password | default(lookup('password', password_settings)) }}"
      no_log: true
      vars:
        existing_secrets_nullable: (existing_secrets | default({}))
        password_settings: /dev/null chars=ascii_letters,digits length=16

    - name: Write out the completed secret file (including backfilling new ones)
      copy:
        content: "{{ secrets | to_nice_json(indent=2) }}"
        dest: "{{ item }}"
        mode: '0600'
      with_items:
        - "{{ secret_varfile_src }}"
        - "{{ secret_varfile_dest }}"

    - name: Check if SSL data already exists
      stat:
        path: "{{ lab_ca_root_csr }}"
      register: ssl_data

    - name: Generate SSL data
      block:
        - name: Ensure SSL info directory exists
          file:
            state: directory
            path: "{{ lab_ssl_dir }}"

        - name: Regenerate Lab Root CA Private key
          openssl_privatekey:
            path: "{{ lab_ca_root_key }}"
            force: yes

        - name: Regenerate Lab Root CA CSR
          openssl_csr:
            basic_constraints:
              - CA:TRUE
            privatekey_path: "{{ lab_ca_root_key }}"
            subject:
              CN: CDNLAB.invalid
              C: US
              ST: Colorado
              L: Denver
              O: Molecule Testing
              OU: CDN
              emailAddress: ops@email.invalid
            path: "{{ lab_ca_root_csr }}"
            force: yes

        - name: Regenerate Lab Root CA Certificate
          openssl_certificate:
            csr_path: "{{ lab_ca_root_csr }}"
            force: yes
            issuer:
              CN: CDNLAB.invalid
              C: US
              ST: Colorado
              L: Denver
              O: Molecule Testing
              OU: CDN
            path: "{{ lab_ca_root_crt }}"
            privatekey_path: "{{ lab_ca_root_key }}"
            provider: selfsigned

        - name: Generate Intermediate Signing CA Private keys
          openssl_privatekey:
            path: "{{ lab_ca_int_key }}"
            force: yes

        - name: Generate Intermediate Signing CA CSRs
          openssl_csr:
            privatekey_path: "{{ lab_ca_int_key }}"
            subject:
              CN: "Lab Intermediate CA"
              C: US
              ST: Colorado
              L: Denver
              O: Molecule Testing
              OU: CDN
              emailAddress: ops@email.invalid
            key_usage:
              - digitalSignature
              - keyCertSign
            basic_constraints:
              - CA:TRUE
              - pathlen:0
            path: "{{ lab_ca_int_csr }}"
            force: yes

        - name: Generate Intermediate Signing CA Certificates
          openssl_certificate:
            csr_path: "{{ lab_ca_int_csr }}"
            force: yes
            issuer:
              CN: CDNLAB.invalid
              C: US
              ST: Colorado
              L: Denver
              O: Molecule Testing
              OU: CDN
            path: "{{ lab_ca_int_crt }}"
            privatekey_path: "{{ lab_ca_int_key }}"
            provider: ownca
            ownca_path: "{{ lab_ca_root_crt }}"
            ownca_privatekey_path: "{{ lab_ca_root_key }}"
      when: not ssl_data.stat.exists

    - name: Make SSL data available to molecule instances
      copy:
        src: "{{ lab_ssl_dir }}/"
        dest: "{{ lookup('env','MOLECULE_EPHEMERAL_DIRECTORY') }}/files/ssl/"

    - name: Check if all RPMs exist
      shell: "ls -l {{ rpm_dist_dir }}/*.rpm | tr -s ' ' ' ' | cut -d' ' -f9 | grep el{{ centos_version }}"
      register: pkg_rpms
      ignore_errors: true
      changed_when: false

    - name: Invoke pkg to build missing rpms
      command: "./pkg -v -{{ centos_version }} -a"
      args:
        chdir: "{{ playbook_dir }}/../../../.."
      when: ( unique_primary_rpms | length) < 11
      vars:
        partialrgx: ".+.{{ extended_centos_version }}.x86_64.rpm"
        rpmrgx: "^(?!.+(?:debuginfo|debugsource)){{ partialrgx }}"
        rplrgx: ".*/(.+?)-[0-9].+{{ partialrgx }}"
        unique_primary_rpms: "{{ pkg_rpms.stdout_lines | select(\"match\", rpmrgx) | map('regex_replace',rplrgx,\"\\1\") | list | unique }}"

    - name: Ensure RPM directories exists
      file:
        state: directory
        path: "{{ item }}"
      with_items:
        - "{{ lab_rpm_dir }}"
        - "{{ lab_srpm_dir }}"

    - name: Copy in the RPMs
      copy:
        src: "{{ item.0 }}"
        dest: "{{ item.1 }}"
      vars:
        host_rpm_path: "{{ playbook_dir }}/../../../../dist/"
        host_rpm_glob: "{{ host_rpm_path }}*{{ extended_centos_version }}*x86_64.rpm"
        host_srpm_glob: "{{ host_rpm_path }}*{{ extended_centos_version }}*src.rpm"
        rpm_dest: "{{ lab_rpm_dir }}"
        srpm_dest: "{{ lab_srpm_dir }}"
      with_items:
        - "{{ lookup('fileglob',host_rpm_glob).split(',') | product([rpm_dest]) }}"
        - "{{ lookup('fileglob',host_srpm_glob).split(',') | product([srpm_dest]) }}"
